# AWS Connect 개발을 위한 Cursor AI 룰

## 프로젝트 구조 및 명명 규칙

### 디렉토리 구조
```
aws-connect-axcl/
├── aws-connect-flow/        # Contact Flow 이미지 및 설정 파일
├── lambda_function.py       # Lambda 함수 코드 (단일 파일)
├── README.md               # 프로젝트 문서화
├── .cursor/rules/          # Cursor AI 개발 룰
└── .git/                   # Git 버전 관리
```

**실제 프로젝트 구조 (소규모):**
- 단일 Lambda 함수로 이벤트 등록 처리
- Contact Flow 설정 이미지 보관
- 상세한 README 문서화
- 단계별 개발 및 디버깅 이력 관리

### 파일 명명 규칙
- Contact Flow: `{환경}-{기능}-{버전}.json` (예: prod-customer-service-v1.json)
- Lambda 함수: `connect_{기능}_{환경}.py` (예: connect_routing_prod.py)
- 설정 파일: `{환경}.config.json` (예: dev.config.json)

## Python 코딩 스타일 (Lambda 함수)

### 1. 기본 구조
- Python 3.9+ 사용
- Type hints 필수 사용
- Docstring은 Google 스타일 사용
- 함수는 단일 책임 원칙 준수

### 2. Import 순서
```python
# 1. 표준 라이브러리
import json
import logging
import os
from datetime import datetime, timezone
from typing import Dict, Any, Optional

# 2. 써드파티 라이브러리
import boto3
import requests

# 3. 로컬 모듈
from utils.helpers import format_phone_number
from config.settings import AWS_REGION
```

### 3. 로깅 설정
- 모든 Lambda 함수는 CloudWatch 로깅 사용
- 구조화된 JSON 로깅 필수
- 민감정보 마스킹 처리

```python
import logging
logger = logging.getLogger()
logger.setLevel(logging.INFO)

# 로깅 예시
logger.info(json.dumps({
    "event": "function_start",
    "contact_id": contact_id,
    "timestamp": datetime.now(timezone.utc).isoformat()
}))
```

### 4. 에러 처리
- 모든 Lambda 함수는 try-except 블록 필수
- 구체적인 예외 타입 처리
- Contact Flow에 적절한 에러 응답 반환

```python
try:
    # 비즈니스 로직
    result = process_contact_flow(event)
    return create_success_response(result)
except ValueError as e:
    logger.error(f"Invalid input: {str(e)}")
    return create_error_response("INVALID_INPUT")
except Exception as e:
    logger.error(f"Unexpected error: {str(e)}")
    return create_error_response("SYSTEM_ERROR")
```

## Contact Flow 개발 가이드라인

### 1. Flow 구조
- 모든 Flow는 "Set logging behavior"로 시작
- 명확한 에러 처리 경로 필수
- 사용자 입력은 최대 3회 재시도
- 적절한 타임아웃 설정 (5-10초)

### ⚠️ 실제 개발 시 주의사항 (실전 경험)

#### **StoreUserInput 블록 문제 해결**
```
문제: $.StoredInput 값이 Lambda로 전달되지 않음
해결: Lambda 파라미터에서 직접 설정
- 키: inputValue
- 값: $.StoredInput (또는 대안 시스템 변수)

설정 확인사항:
- MaxDigits: 충분한 자릿수 (4-8자리)
- Timeout: 5000ms 이상
- DTMF 톤 전송 확인
```

#### **Lambda 응답 처리**
```
성공 분기: $.External.registrationStatus == "SUCCESS"
실패 분기: $.External.registrationStatus != "SUCCESS"
메시지 출력: $.External.successMessage 또는 $.External.errorMessage
```

### 2. 속성(Attributes) 관리
- 속성명은 snake_case 사용
- 표준 속성 세트 정의 및 일관성 유지

```json
{
  "customer_id": "고객 식별자",
  "call_reason": "통화 목적",
  "priority_level": "우선순위 (1-5)",
  "queue_name": "대기열 이름",
  "agent_skill": "필요한 상담원 스킬"
}
```

### 3. 프롬프트 관리
- 다국어 지원 시 언어별 분리
- TTS: 한국어(Seoyeon), 영어(Joanna)
- SSML 태그 활용한 자연스러운 발음
- 단일 프롬프트는 30초 이내

## Lambda 함수 개발 템플릿

### ⚡ 실전 Lambda 개발 패턴 (aws-connect-axcl 프로젝트 경험)

#### **다양한 이벤트 형식 처리**
```python
def lambda_handler(event, context):
    # AWS Connect는 다양한 형식으로 데이터 전달
    is_simple_format = 'Details' not in event
    
    if is_simple_format:
        # 직접 파라미터 형식: {"customerInput": "1234", ...}
        lambda_parameters = event
        contact_data = {}
        attributes = {}
    else:
        # 표준 AWS Connect 형식
        contact_data = event.get('Details', {}).get('ContactData', {})
        attributes = contact_data.get('Attributes', {})
        lambda_parameters = event.get('Details', {}).get('Parameters', {})
```

#### **강화된 입력값 추출 (다중 경로)**
```python
# 우선순위 기반 입력값 추출
possible_inputs = [
    lambda_parameters.get('inputValue'),      # 최우선
    lambda_parameters.get('customerInput'),
    attributes.get('customerInput'),
    # ... 더 많은 대안 경로들
]

customer_input = None
for inp in possible_inputs:
    if inp and str(inp).strip():
        customer_input = str(inp).strip()
        break
```

#### **테스트 모드 구현 (개발 필수)**
```python
# 실제 입력이 없을 때 테스트 모드 실행
if not customer_input:
    print("⚠️ 테스트 모드: 기본값 '1234' 사용")
    customer_input = "1234"  # 운영 시 제거
```

### 기본 핸들러 구조
```python
def lambda_handler(event: Dict[str, Any], context) -> Dict[str, Any]:
    """
    AWS Connect Contact Flow Lambda Handler
    
    Args:
        event: Contact Flow 이벤트 데이터
        context: Lambda 실행 컨텍스트
        
    Returns:
        Contact Flow 응답 딕셔너리
    """
    try:
        # 요청 로깅
        log_lambda_start(event, context)
        
        # Contact 데이터 추출
        contact_data = extract_contact_data(event)
        
        # 비즈니스 로직 실행
        result = process_business_logic(contact_data)
        
        # 응답 생성
        response = create_contact_flow_response(result)
        
        # 응답 로깅
        log_lambda_response(response, contact_data.get('contact_id'))
        
        return response
        
    except Exception as e:
        return handle_lambda_error(e, context)
```

### 유틸리티 함수 패턴
```python
def extract_contact_data(event: Dict[str, Any]) -> Dict[str, str]:
    """Contact Flow 이벤트에서 필요한 데이터 추출"""
    # 구현 코드

def create_contact_flow_response(
    success: bool, 
    attributes: Dict[str, str] = None,
    next_action: str = "continue"
) -> Dict[str, Any]:
    """Contact Flow 응답 생성"""
    # 구현 코드
```

## 환경 설정 관리

### 1. 환경변수 사용
- 하드코딩 금지, 모든 설정은 환경변수 사용
- 기본값 제공으로 안정성 확보

```python
BUCKET_NAME = os.environ.get('BUCKET_NAME', 'default-connect-bucket')
AWS_REGION = os.environ.get('AWS_REGION', 'ap-northeast-2')
LOG_LEVEL = os.environ.get('LOG_LEVEL', 'INFO')
```

### 2. 설정 파일 구조
```json
{
  "environment": "development",
  "aws": {
    "region": "ap-northeast-2",
    "connect_instance_id": "your-instance-id"
  },
  "database": {
    "host": "your-db-host",
    "port": 5432
  },
  "features": {
    "enable_recording": true,
    "enable_analytics": false
  }
}
```

## 보안 가이드라인

### 1. IAM 권한 최소화
- Lambda 함수별 최소 권한 정책 적용
- 리소스별 세부 권한 설정

### 2. 데이터 암호화
- S3 저장 시 KMS 암호화 필수
- 전송 중 데이터는 TLS 1.2+ 사용
- 로그에서 민감정보 마스킹

```python
def mask_phone_number(phone: str) -> str:
    """전화번호 마스킹 처리"""
    if len(phone) > 4:
        return phone[:3] + "*" * (len(phone) - 6) + phone[-3:]
    return "*" * len(phone)
```

## 테스트 가이드라인

### 1. 단위 테스트
- pytest 사용
- 모든 Lambda 함수 100% 커버리지 목표
- Mock 객체로 AWS 서비스 모킹

```python
import pytest
from moto import mock_s3
from lambda_function import lambda_handler

@mock_s3
def test_lambda_handler_success():
    # 테스트 구현
    pass
```

### 2. 통합 테스트
- Contact Flow 시나리오별 E2E 테스트
- 실제 AWS 리소스 사용한 검증

## 성능 최적화

### 1. Lambda 설정
- 메모리: 실사용량 기반 적정 할당
- 타임아웃: Contact Flow용은 최대 8초
- Cold Start 최소화: Provisioned Concurrency 활용

### 2. 데이터베이스 연동
- 연결 풀링 활용
- 쿼리 최적화 및 인덱스 활용
- 트랜잭션 범위 최소화

```python
# Lambda 외부에서 DB 연결 초기화
import psycopg2
from psycopg2 import pool

connection_pool = psycopg2.pool.ThreadedConnectionPool(
    minconn=1, maxconn=20, **db_config
)

def get_db_connection():
    return connection_pool.getconn()
```

## API 개발 표준

### 1. REST API 구조
- RESTful 원칙 준수
- 일관된 응답 형식 사용

```json
{
  "success": true,
  "data": {},
  "error": null,
  "metadata": {
    "version": "v1",
    "timestamp": "2025-08-03T12:00:00Z"
  }
}
```

### 2. 에러 응답 표준
```json
{
  "success": false,
  "data": null,
  "error": {
    "code": "INVALID_INPUT",
    "message": "Required field missing",
    "details": {}
  }
}
```

## 모니터링 및 알람

### 1. CloudWatch 메트릭
- Lambda Duration, Errors, Throttles 모니터링
- Contact Flow 성공률, 평균 처리 시간 추적
- 커스텀 메트릭으로 비즈니스 KPI 측정

### 2. 알람 설정
- Lambda 에러율 > 5% 시 알람
- 응답 시간 > 5초 시 알람
- Contact Flow 실패율 > 10% 시 알람

## CI/CD 파이프라인

### 1. 코드 품질 검사
- flake8, black을 통한 코드 포맷팅
- mypy를 통한 타입 체크
- pytest를 통한 테스트 실행

### 2. 배포 단계
```yaml
# GitHub Actions 예시
stages:
  - lint: 코드 품질 검사
  - test: 단위/통합 테스트
  - build: Lambda 패키지 빌드
  - deploy-dev: 개발 환경 배포
  - deploy-staging: 스테이징 환경 배포
  - deploy-prod: 운영 환경 배포 (수동 승인)
```

## 문서화 규칙

### 1. 코드 문서화
- 모든 함수에 docstring 필수
- 복잡한 로직은 인라인 주석 추가
- README.md에 프로젝트 개요 및 설정 방법 기술

### 2. API 문서화
- OpenAPI 3.0 스펙 사용
- 요청/응답 예시 포함
- 에러 코드 및 메시지 정의

## 버전 관리

### 1. Git 브랜치 전략
- main: 운영 환경
- develop: 개발 환경
- feature/*: 기능 개발
- hotfix/*: 긴급 수정

### 2. 태깅 규칙
- v{major}.{minor}.{patch} 형식
- 운영 배포 시 반드시 태그 생성

## 🔧 실전 문제해결 가이드 (aws-connect-axcl 프로젝트 사례)

### 💡 Contact Flow → Lambda 연동 문제해결

#### **문제 1: StoreUserInput 값이 Lambda로 전달되지 않음**
```
증상: inputValue = "" (빈값)
원인: $.StoredInput 시스템 변수 매핑 문제
해결: Lambda 파라미터에서 inputValue: $.StoredInput 직접 설정
확인: Contact Flow 로그에서 StoreUserInput Results 값 체크
```

#### **문제 2: Lambda Parameters가 완전히 비어있음**
```
증상: Lambda Parameters = {}
원인: Contact Flow 연결 문제 또는 SetAttributes 실패
해결: SetAttributes 블록 제거하고 Lambda 직접 연동
```

#### **문제 3: 입력값 검증 실패**
```
증상: "올바른 사번을 입력해주세요" 에러
원인: 테스트값이 문자열 포함 (TEST123)
해결: 숫자형 테스트값 사용 (1234)
```

### 🎯 성공적인 결과 확인 방법

#### **완전한 성공 로그 예시**
```
✅ Lambda Parameters: {"inputValue": "1234", "customerPhone": "+82...", ...}
✅ 입력값 검증: 4자리 숫자 통과
✅ S3 저장: s3://axcl/axcl_event.txt
✅ 추첨번호 생성: L3244
✅ registrationStatus: "SUCCESS"
✅ Duration: 306.96 ms
```

## 주의사항

1. **절대 금지사항**
   - 하드코딩된 credentials 사용 금지
   - 민감정보 로깅 금지
   - 운영 데이터 개발 환경 사용 금지

2. **필수 체크리스트**
   - [ ] 환경변수 설정 확인
   - [ ] IAM 권한 최소화 확인
   - [ ] 에러 처리 구현 확인
   - [ ] 로깅 구현 확인
   - [ ] 테스트 코드 작성 확인
   - [ ] Contact Flow 연동 테스트
   - [ ] StoreUserInput 설정 검증
   - [ ] Lambda 응답 속성 확인